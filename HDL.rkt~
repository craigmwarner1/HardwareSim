#lang racket
(require plai
	 rackunit)
;; One small step for a man, one giant leap for a project Matt has been dreaming-of/dreading.

;;STRUCTS

(struct chip (name ins outs parts)
  #:transparent)

(struct wire (name)
  #:transparent)

(struct bus (name size)
  #:transparent)

(struct part (name connections built_in?)
  #:transparent)

(struct connection (in out)
  #:transparent)


;;DATATYPES

(define-type CHIP
  [id    (sym symbol?)]
  [in    (ins list?)]
  [out   (outs list?)]
  [parts (name Chip?)
         (args list?)]
)


;;PARSING

;;first-is? : sexp -> sexp
(define (first-is? sexp sym)
  (equal? (first sexp) sym))

;;first-is-one-of? : sexp '()
;;for use with common/easily expressed Bool operations 
(define (first-is-one-of? sexp ls)
  (member (first sexp) ls))


;;parse : sexp -> AST
(define (parse chip)
  (cond
    [(first-is? chip 'CHIP)
     (chip (second chip) (third chip) 
           (fourth chip) (fifth chip))]
    [(first-is? chip 'IN)
     ;;QQ
     (parse (rest chip))]
    [(first-is? chip 'OUT)
     ;;QQ
     parse (rest chip)]
    [(first-is? chip 'Parts)
     ;;QQ
     (parse (rest chip))]
    [(symbol? chip)
     (cond
       ;;QQ
       [(member? '("[]") chip)
        ;;QQ
        (connection ((bus (first chip)) (second chip)))]
       [else
        (connection ((wire (first chip)) (second chip)))]
     (parse (rest chip))]
    [(first-is-one-of? chip (ls existing gates))]
    [
     



;;INTERPRETATION
(define (interp ast)
  (type-case Chip ast
    [in (ins) ]))
  
